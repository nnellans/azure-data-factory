trigger: 'none' # disable CI trigger
pr: 'none'      # disable PR trigger

pool:
  vmImage: 'windows-latest' # the AzureFileCopy task requires a Windows agent

parameters:
- name: 'deployType'
  displayName: 'Type of Deployment to use'
  type: 'string'
  values:
  - 'whatif'
  - 'standard'
  default: 'whatif'
- name: 'deployTemplate'
  displayName: 'Type of ARM Template to deploy'
  type: 'string'
  values:
  - 'all-in-one' # for a deployment of the all-in-one ARM Template
  - 'linked'     # for a deployment of the Linked ARM Templates
  default: 'standard' 

variables:
  azureServiceConnection: 'test-ado-serviceconnection' # Azure DevOps Service Connection for Azure
  sourceAdf: 'adf-test-nn'                             # name of the source Azure Data Factory instance
  sourceAdfPublishBranch: 'adf_publish'
  destAdf: 'adf-test-new'                              # name of the destination Azure Data Factory instance
  destAdfRg: 'adf-test-new'                            # Resource Group for the destination Azure Data Factory instance
  linkedTemplatesStorageAccount: 'adftestnn'           # name of the Storage Account to hold the ARM Linked Templates

resources:
  repositories:
  - repository: 'adfTemplates'
    type: 'github'
    name: 'nnellans/azure-data-factory'
    ref: $(sourceAdfPublishBranch)
    endpoint: 'nnellans' # Azure DevOps Service Connection for GitHub

steps:

- checkout: 'adfTemplates'

#------------------------------------
# If using the all-in-one Template
#------------------------------------

# perform a what-if deployment
- task: 'AzureCLI@2'
  displayName: 'What-If Deployment for All-in-one Templates'
  condition: |
    and(
      succeeded(),
      eq('${{ parameters.deployType }}', 'whatif'),
      eq('${{ parameters.deployTemplate }}', 'all-in-one')
    )
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    scriptArguments: ''
    inlineScript: |
      az deployment group create --what-if `
        --resource-group $(destAdfRg) `
        --template-file $(System.DefaultWorkingDirectory)\$(sourceAdf)\ARMTemplateForFactory.json `
        --parameters $(System.DefaultWorkingDirectory)\$(sourceAdf)\ARMTemplateParametersForFactory.json `
        --parameters factoryName='$(destAdf)'

# perform a standard deployment
- task: 'AzureCLI@2'
  displayName: 'Standard Deployment for All-in-one Templates'
  condition: |
    and(
      succeeded(),
      eq('${{ parameters.deployType }}', 'standard'),
      eq('${{ parameters.deployTemplate }}', 'all-in-one')
    )
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    scriptArguments: ''
    inlineScript: |
      az deployment group create `
        --resource-group $(destAdfRg) `
        --template-file $(System.DefaultWorkingDirectory)\$(sourceAdf)\ARMTemplateForFactory.json `
        --parameters $(System.DefaultWorkingDirectory)\$(sourceAdf)\ARMTemplateParametersForFactory.json `
        --parameters factoryName='$(destAdf)'

#------------------------------------
# If using the Linked Templates
#------------------------------------

# copy the ARM Linked Templates from the ADF repo to Azure Storage
- task: 'AzureFileCopy@5'
  name: 'AzureFileCopy'
  displayName: 'Copy Linked Templates to Azure Storage'
  condition: |
    and(
      succeeded(),
      eq('${{ parameters.deployTemplate }}', 'linked')
    )
  inputs:
    azureSubscription: $(azureServiceConnection)
    SourcePath: '$(System.DefaultWorkingDirectory)/$(sourceAdf)/linkedTemplates/*.json'
    Destination: 'AzureBlob'
    storage: $(linkedTemplatesStorageAccount)
    ContainerName: 'linkedTemplates' # will be automatically created if it doesn't exist
    #CleanTargetBeforeCopy: true # default is false
    #sasTokenTimeoutInMinutes: 120 # default is 240

# testing values from AzureFileCopy
- task: 'PowerShell@2'
  displayName: 'Testing output values from AzureFileCopy task'
  condition: |
    and(
      succeeded(),
      eq('${{ parameters.deployType }}', 'whatif'),
      eq('${{ parameters.deployTemplate }}', 'linked')
    )
  inputs:
    pwsh: true
    targetType: 'inline'
    script: |
      Write-Output "uri test: $(AzureFileCopy.StorageContainerUri)"
      Write-Output "update test: ${{ replace('$(AzureFileCopy.StorageContainerUri)', 'linkedtemplates/', 'linkedtemplates') }}"
      Write-Output "sas test: $(AzureFileCopy.StorageContainerSasToken)"

# perform a what-if deployment
- task: 'AzureCLI@2'
  displayName: 'What-If Deployment for Linked Templates'
  condition: |
    and(
      succeeded(),
      eq('${{ parameters.deployType }}', 'whatif'),
      eq('${{ parameters.deployTemplate }}', 'linked')
    )
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    scriptArguments: ''
    inlineScript: |
      az deployment group create --what-if `
        --resource-group $(destAdfRg) `
        --template-file $(System.DefaultWorkingDirectory)/$(sourceAdf)/linkedTemplates/ArmTemplate_master.json `
        --parameters $(System.DefaultWorkingDirectory)/$(sourceAdf)/linkedTemplates/ArmTemplateParameters_master.json `
        --parameters containerUri='${{ replace('$(AzureFileCopy.StorageContainerUri)', 'linkedtemplates/', 'linkedtemplates') }}' `
        --parameters containerSasToken='$(AzureFileCopy.StorageContainerSasToken)' `
        --parameters factoryName='$(destAdf)'
